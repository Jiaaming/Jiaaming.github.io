<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Articles on Jiaming&#39;s Blog</title>
    <link>https://jiaaming.cn/en/post/</link>
    <description>Recent content in Articles on Jiaming&#39;s Blog</description>
    <image>
      <title>Jiaming&#39;s Blog</title>
      <url>https://jiaaming.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://jiaaming.cn/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 02 Mar 2022 12:00:00 -0500</lastBuildDate><atom:link href="https://jiaaming.cn/en/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>·2024·年度总结</title>
      <link>https://jiaaming.cn/en/post/2024-summary/</link>
      <pubDate>Thu, 31 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/2024-summary/</guid>
      <description>Note: 原文由Markdown转换（这个），图片链接通过github图床所以可能需要科学上网。
冬：在埃德蒙顿 出发的时间是在结束大四上考试后的第五天。为了应对这个我以为可能是我人生中最冷的冬天（eg.去之前埃德蒙顿的最低气温一度降到了-45摄氏度），我高瞻远瞩的购入了四套不同厚度的秋裤，三种厚度的秋衣，雪地靴，厚羽绒服&amp;hellip;
最后实际情况却恰恰相反，这一年埃德蒙顿的气温反常的热(房东：very abnormal)，基本上都在零下五度左右。我准备的三种厚度的秋裤只穿了最薄和次薄的那种，甚至三分之一的时间不用穿秋裤出门。
中间在温哥华短暂的转了个机，也是走了一遍入境加拿大搞permit相关的整个流程 （为后面铺路了属于是） 。彼时BCPNP还健在，当时想着: “啊，要是半年后还能在这里的话我就知足了..“
工作 生活 由于阿尔伯塔大学那边不提供住宿，加上由于某逆天专业课导致我必须缩短一个月居留，于是从airbnb上租了一个房子。
房子一共能住5个租客+房东本人，整体还是挺舒适的。由于大多数人都是短租，跟其它的租客交流交流还是蛮有趣的。一开始的时候有一个日本同学和越南同学，因为大家要公用厨房，跟他们比起来我做的饭像难民水平🤣越南同学跟我说看过中国高考相关的内容，感觉难度很insane。
房东是一位和蔼的印度裔老奶奶Preet，约莫六七十岁。吃完晚饭有空的时候就会聊聊天。她是9岁的时候到这边的，有一个孩子在蒙特利尔工作，还有其他家庭成员也在这边住，下午会回去给家人做饭。她会称呼husband为life partner，蛮有意思的。之前看airbnb的时候又一览language写到Preet会荷兰语，我感觉很神奇于是后来问了一下，原来是她的life partner之前在加拿大东边一个荷兰语区域长大的，Preet之前每年会过去跟着生活一阵子。她还提到说她的荷兰语之前说的“actually pretty good！”，但是后来十几年不怎么说了，“Maybe I should remove that” 她说。
有时还会给租客准备cookie/糖/Samosa（一种印度小吃，嘎嘎好吃）。
有一次聊天的时候，她说她在23岁的时候遇到了一场bomb threat，是从荷兰阿姆斯特丹飞回埃德蒙顿的航班。这件事情导致她对坐飞机有了PTSD（她说当时这个概念不太火，她不知道这种症状叫做PTSD，看了很多心理学和其他相关的书后来才得知）。这几十年以来一直无法坐超过一个半小时的航班，而且需要有人陪同。后来我好奇搜了一下新闻，竟然还能搜到相关的报道。
聊天的时候也聊到各自国家的一些问题/现状。她描述说现在加拿大本地人也不愿意生孩子生孩子🤣然后房价这两年也很高，本地人没有父母资助也搞不定，难绷了。 总之住在这里的这段时间还是非常愉快的，走之前最后一天，跟Jenny、Preet一起包了饺子做了一顿晚饭。
离开的时候是凌晨。我把所有行李箱和书包从地下室轻轻的搬到楼上，叫了uber后坐在客厅的沙发上静静的等待，回忆着这短暂却又漫长的两个月。 记得来这里之前，我没有确定未来是会有学上还是gap，毕设没有进展，暑假的计划更是一无所有。而60天后，我确定了去处~~（虽然当时没有拿定去哪，但是至少不会gap了~~），毕设搞定了大部分工作，暑假也有了实习的机会（见后文）。经历了很长一段时刻在悬崖边缘行走的时光后，内心终于可以短暂的放松一阵了。
春：大四下 大四下真的很开心。是我初中毕业后度过的最开心的一个学期。拿定了去向后每天水完课，下完班就是跟舍友们溜瓦洛兰特。 抽空还去看了上海大师赛，好看捏 申请季大结局 关于整个申请的结果和复盘，其实做了一个视频：24Fall美国加拿大计算机授课硕士难度对比｜个人背景陈述与DP分享
一开始的时候因为想躺平+身份原因+觉得去美国只有玩命卷+找工这一条既定路线，所以比较抗拒去美国。给自己定的预期大概是除非抽到加州学校的彩票，否则就去加拿大————但是加拿大录取又比较玄学，所以美国也留几个保底。
总之最后美国基本上烂完了，最后只录了TAMU的CE和UCSC MSCS。相比之下加拿大反而好一些，录了Mcmaster、SFU、Waterloo（non-coop项目，直接排除）。22年末的时候感觉自己比较符合/理想的offer大概就是sfu、McMaster、UCI（这个寄了），最后能拿其中的两个我也是很满足了
马后炮的话如果微软的实习能够早一点做，美国的录取结果应该会比这个好不少，其实申请的时候的实习和其他经历不够硬，当时也感觉有的知识和对sde的理解比较匮乏，有力不从心的感觉；CS确实太卷了，加上ECNU逆天的绩点算法背刺，所以录取结果也不算意外；加拿大的话估计是在阿尔伯塔的经历有加分，基本上达到了我的预期，反而是申请的t1级别的项目都录了，t2、t3凑数/保底的都拒了&amp;hellip;确实玄学
思考offer的时候也纠结了一下。申请季前也预演过抉择美国or加拿大这样的情况，最后想了想美国的行情还是糯了，感觉压力太大自己可能顶不住。另外也有点儿不想最后没找到工作回国的情况。不是不能接受回国（可能回国反而是更轻松，经济上收益更高的选择），而是不太希望出现只能做一种选择，不得不去做的情况。
另外考虑我更重要，更长远的人生规划中还是希望尽可能在海外生活一段时间/寻求舒适区外的更多机会，所以长远来看我觉得身份是一个迟早就要解决的，对我而言十分重要的事情。想到这里（其实22年大概就这么想的，一直没变哈哈哈），答案也就呼之欲出了。
其实自己内心还是很向往加州的。（来加拿大后感觉跟当时在加州时候的那种氛围还是差的很远）最后为了说服自己不后悔，给自己创造了这些思想钢印：
如果我真的想去加州，那么我肯定会接UCSC的offer，没接就是还不够想 如果我真的这么想去加州，那么很多年后有了积累和足够的水平后，也可以再南下； 去加拿大就是因为我太想去加州了，你细品 Mcmaster和SFU也纠结了一阵子。一开始无疑是倾向SFU的，因为当时有BCPNP（省流：读完书给PR），但是3.19号的时候这个实行了好几年的政策取消了，改成必须要有job offer。而Mcmaster录的CAS其实在很多人看来是一个性价比非常高的项目，加上这个也是我套磁教授弄来的，感觉也蛮不容易的。
当时我个人的主观判断是：
最核心的：有无西海岸 = 居住舒适度 = 气候 &amp;raquo;&amp;gt; 其它 从历史上看，BC省整体来讲的移民政策应该会比安省更加友好 安省境内除了Mcmaster还有滑铁卢、多伦多这些学校的毕业生压着，BC省的话CS专业SFU比UBC落后不多，在各自省内的竞争跟麦马差别大/小优 需要job offer也比较合理，总不可能一直没工作吧。就算找不到反正也不想美国要求60天内滚蛋 说了半天其实区别也不大，找工作还是看个人水平反正市场好的话去哪都能找到工作，市场不好运气差的话去哪都是寄 最后还是来野鸡SFU了，风景确实不错hhh
其实很多思考都是基于：”如果做选择能够在未来不后悔“ 的角度出发的，很可能跟客观现实无关。站在24年末回头看，在整个市场大势、政治环境下，个人的努力和选择的影响可能远不如：”谁赢了BC省选，谁当了美国总统，湾区那些研究ai的天才大脑又搞了哪些能替代人的新模型&amp;hellip;“这些事情来得大，哈哈。
关于毕业 夏：微软实习 当时正值二月底三月初，有了拖底的offer后开始想着如何利用暑假。由于一般公司都招大三的，所以一开始看的是谷歌Summer of Code，甚至还邮件骚扰了一些项目的mentor。直到后来看到微软在找intern（感谢小晏嫂子转发微软的招聘信息，太关键了），于是一开始没抱太大希望的投了下。
面试 投递的时候是三月初，我主要的想法是：</description>
    </item>
    
    <item>
      <title>Microsoft Intern Summary: Merging Servers in the VSCode Gradle Extension</title>
      <link>https://jiaaming.cn/en/post/ms-intern-summary/</link>
      <pubDate>Sat, 03 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/ms-intern-summary/</guid>
      <description>Project Background Communication Between Servers Architecture Before the Merge Why Merge? How to Merge Architecture After the Merge Step 1: Merging Task Server and Build Server Challenges Connection Workflow Step 2: Merging Language Server to Gradle Server Performance After Merge How Was Performance Measured? Pre-Merge Memory Monitoring Post-Merge Memory Monitoring Performance Results Small Medium Large Super Large Project Background During my internship at Microsoft, I worked on the VSCode Gradle Extension.</description>
    </item>
    
    <item>
      <title>How to Build a Simple AI Conversational Assistant Based on Langchain.js</title>
      <link>https://jiaaming.cn/en/post/chapter-11/</link>
      <pubDate>Mon, 22 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-11/</guid>
      <description>本科的最后一门专业课：软件开发实践，要开发一个虚拟宠物医院学习系统，需要实现一个AI对话助手，具体的需求比较模糊。考虑到其他部分都是很低级的增删改查，因此一开始的想法就是能否将增删改查与AI对话相结合，提问的话问数据库中上传的药品/病例信息。
具体架构还是采取了RAG架构，本着一切从简的原则采取了Langchain.js纯前端实现，用OpenAI提供的api接口和Pinecone提供的远程向量数据库服务。
What is RAG（@GPT4）： RAG（Retrieval-Augmented Generation）是一种结合了信息检索和生成模型的技术，旨在提高自然语言处理（NLP）任务中的生成质量和相关性。它通过利用外部的知识源（如文档数据库或信息库）来增强生成模型的能力，特别适用于问答、摘要、翻译等任务。
RAG的工作原理 RAG模型主要由两部分组成：检索器和生成器。
检索器： 检索器的任务是从一个大型的文档集合中检索出与输入查询最相关的文档或信息片段。这通常通过向量相似性搜索实现，其中查询和文档都被编码为向量，通过计算向量之间的相似度来找到最匹配的条目。 生成器： 生成器通常是一个基于 Transformer 的语言模型，如 GPT 或 BERT。它使用检索到的文档作为上下文信息来生成答案。这使得生成的内容不仅依赖于模型内部的知识（训练数据中学到的），而且还依赖于外部的、具体的、与当前查询直接相关的信息。 RAG的优势 信息量更丰富：与传统的生成模型相比，RAG通过访问外部数据库增加了处理问题时可以利用的信息量。 准确性和相关性提高：在依赖外部知识进行回答的任务中，RAG可以提供更准确、更详细的答案。 灵活性：可以根据需要访问任何形式的结构化或非结构化数据源。 应用场景 RAG模型在多种应用中都非常有效，例如：
问答系统：能够生成详细的答案，尤其是在需要引用外部信息源进行事实查证时。 内容摘要：从一组相关文档中提取关键信息，生成凝练的摘要。 文章写作：在创建文章内容时，能够参考和整合多种资料和报告，提高内容的丰富性和深度。 技术挑战 尽管RAG技术提供了许多优势，但实现它也面临一些挑战：
检索效率：高效检索相关文档对于实时应用尤为关键，需要优化索引和查询处理。 数据同步：确保所依赖的外部知识库是最新的，这对于保证生成内容的准确性和相关性非常重要。 结果的一致性：生成内容需要与检索到的文档保持一致性，避免产生误导信息或错误。 具体实现 首先在Pinecone官网注册一个账号（省略了）
Pinecone中是分一个project可以有很多index，一个index下可以划分很多namespace。由于用的免费版只能有一个project，一个index，因此只能通过定义namespace的方式来区别不同的部分。
例如本项目有药品（medicine）和化验（lab）的查询，下面定义了这两个namespace。namespace是插入时的参数，不用手动设定。查询时可以在智能namespace下查找，十分方便。
对于每条record，namespace和ID不可修改，但是可以根据ID来更新其中的Values和metadata（就是下面的Key-Value键值对。
对于Values，就是执行embedding时转换后的数组。我前端用的是OpenAI的text-embedding-ada-002，转换后有1536维，因此这里的length就是1536。
查阅Pinecone的API接口，先写插入的函数，其中upsert就是首先看id是否存在，存在的话就更新，否则就插入。
export const pineconeAdd = async (id, namespace, input_text, metadata) =&amp;gt; { const embedding = await embedText(input_text); try { const insertResponse = await index.namespace(namespace).upsert([ { id: `${namespace}${id}`, values: embedding, metadata: metadata } ]); return { success: true, message: &amp;#39;Pinecone 添加成功&amp;#39;, detail: insertResponse }; } catch (error) { return { success: false, message: &amp;#39;Pinecone 插入错误&amp;#39;, error }; } }; 前端插入部分的逻辑，这部分跟往Mysql插入同时执行。更新也是一样：</description>
    </item>
    
    <item>
      <title>Leetcode record - July 2023</title>
      <link>https://jiaaming.cn/en/post/chapter-9/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-9/</guid>
      <description>关于区间集合：
这个问题的难点在于如何有效地处理会议的冲突。具体来说，需要在每个时间点追踪哪些会议正在进行，然后决定是否需要额外的会议室。下面是一些思考的建议和线索：
排序：这是一个重要的线索。当你看到这种需要比较或者组织时间区间的问题时，排序通常是一个有用的第一步。在本问题中，按照开始时间对会议进行排序可以帮助我们逐个地处理会议，确保我们先处理开始时间早的会议。 优先队列（最小堆）：在处理一系列事件，其中每个事件都有开始和结束时间，并且可能会发生冲突的情况下，优先队列（特别是最小堆）经常会被用到。在本问题中，我们需要知道当前正在进行的所有会议中最早结束的那一个，以决定是否需要一个新的会议室。最小堆正好可以提供这个功能，因为它总是把最小的元素放在前面。 贪心思想：这是一个隐藏的线索。这个问题可以通过一种贪心的方式来解决，即总是尽可能地复用会议室。具体来说，每次当一个新的会议开始时，如果有一个会议已经结束，那么我们就可以在同一个会议室举行这个新的会议，而不需要新开一个会议室。这个策略保证了我们总是使用最少数量的会议室。 重叠区间问题：类似的问题经常出现在算法问题中，所以可以作为一个模式来识别。当你看到需要处理重叠区间的问题时，可以想到使用排序和优先队列来解决。 在碰到这类问题时，练习和经验也很重要。一开始可能不容易看出解决方案，但通过解决更多的类似问题，你将能够更容易地识别出相应的模式，并找到正确的方法来解决这类问题。
253. Meeting Rooms II
Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.
Example 1:
Input: intervals = [[0,30],[5,10],[15,20]] Output: 2
Example 2:
Input: intervals = [[7,10],[2,4]] Output: 1
Constraints:
1 &amp;lt;= intervals.length &amp;lt;= 104 0 &amp;lt;= starti &amp;lt; endi &amp;lt;= 106 class Solution { public int minMeetingRooms(int[][] intervals) { Arrays.sort(intervals, (a, b)-&amp;gt;Integer.</description>
    </item>
    
    <item>
      <title>Use Swagger to show API in Django</title>
      <link>https://jiaaming.cn/en/post/chapter-10/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-10/</guid>
      <description>Use Swagger to show API in Django Document: https://drf-yasg.readthedocs.io/en/stable/readme.html#usage
A good example: https://debrajbhal.hashnode.dev/adding-custom-documentation-to-apis-in-django-rest-framework-using-drf-yasg
Add Post parameters: https://stackoverflow.com/questions/50929098/django-rest-framework-how-to-add-post-parameters-to-api-documentdrf-yasg
Hard code response parameters: https://stackoverflow.com/questions/62914407/drf-yasg-how-to-hide-django-rest-framework-schema
#import from drf_yasg.utils import swagger_auto_schema from drf_yasg import openapi from rest_framework.decorators import api_view For GET method:
#CBV version class TsView: @staticmethod @api_view([&amp;#39;GET&amp;#39;]) #it depend. Add it when you choose to write CBV @swagger_auto_schema( operation_description=&amp;#34;get ts info based on ts number&amp;#34;, responses={ 200: openapi.Response(&amp;#34;request success&amp;#34;, schema=openapi.Schema(type=openapi.TYPE_ARRAY, items=openapi.Schema(type=openapi.TYPE_OBJECT))), 400: &amp;#34;request failed&amp;#34;, }, ) def get_ts_info(request, ts_num): &amp;#34;&amp;#34;&amp;#34; Retrieve the detailed information of a specific ts by its number.</description>
    </item>
    
    <item>
      <title>Leetcode record - June 2023</title>
      <link>https://jiaaming.cn/en/post/chapter-8/</link>
      <pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-8/</guid>
      <description>624. Maximum Distance in Arrays
You are given m arrays, where each array is sorted in ascending order.
You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers a and b to be their absolute difference |a - b|.
Return the maximum distance.
Example 1:
Input: arrays = [[1,2,3],[4,5],[1,2,3]] Output: 4 Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.</description>
    </item>
    
    <item>
      <title>Leetcode record - March 2023</title>
      <link>https://jiaaming.cn/en/post/chapter-7/</link>
      <pubDate>Tue, 21 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-7/</guid>
      <description>Binary Search Find left bound/right bound
public int[] searchRange(int[] nums, int target) { return new int[]{helper(nums, target, true), helper(nums, target, false)}; } public int helper(int[] nums, int target,boolean trueIfSearchLeftBound){ int l = 0; int r = nums.length-1; int res = -1; while (l&amp;lt;=r){ int midl = (l+r)/2; if (nums[midl]&amp;gt;target){ r = midl-1; }else if(nums[midl]&amp;lt;target){ l = midl+1; }else{ res = midl; if (trueIfSearchLeftBound){ r = midl-1; }else{ l = midl+1; } } } System.</description>
    </item>
    
    <item>
      <title>基于Vue-Springboot的论文管理系统</title>
      <link>https://jiaaming.cn/en/post/chapter-6/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-6/</guid>
      <description>演示地址：ECNU-2022Spring-DatabaseTermProject第四组_哔哩哔哩_bilibili
关于登录信息、权限显示 这里利用sessionStorage将用户的信息跟权限（理论上应该一起作为user信息返回的，这里分开存储。后续页面左侧Aside的访问也可以根据存储的sessionStorage解决。
*sessionStorage 属性允许你访问一个 session Storage 对象。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。**在新标签或窗口打开一个页面时会在顶级浏览上下文中初始化一个新的会话，*这点和 session cookies 的运行方式不同。
request.post(&amp;#34;/api/login&amp;#34;, this.form).then(res =&amp;gt; { console.log(res) if (res.code === 0) { console.log(3333) this.$message({ type: &amp;#34;success&amp;#34;, message: &amp;#34;登录成功&amp;#34; }) sessionStorage.setItem(&amp;#34;user&amp;#34;,JSON.stringify(res.data)) // 缓存用户信息 request.post(&amp;#34;/api/permission?user_id=&amp;#34; + res.data.user_id).then(res1 =&amp;gt; { console.log(res1) console.log(&amp;#34;permission Get&amp;#34;) sessionStorage.setItem(&amp;#34;userPermission&amp;#34;,JSON.stringify(res1)) // 缓存用户信息 let userStrr =sessionStorage.getItem(&amp;#34;userPermission&amp;#34;) || &amp;#34;{}&amp;#34; this.permissionList =JSON.parse(userStrr) activeRouter() this.$router.push(&amp;#34;/&amp;#34;) //登录成功之后进行页面的跳转，跳转到主页 }) // 登录成功的时候更新当前路由 //activeRouter() } else { this.$message({ type: &amp;#34;error&amp;#34;, message: res.msg }) } }) 关于路由配置 需要避免任何用户都能通过改url的方式访问对应页面，因此考虑如果此用户没有访问该页面的权限，便不进行路由加载。采取循环的方式进行路由注册。（addRoute）</description>
    </item>
    
    <item>
      <title>2022年度总结</title>
      <link>https://jiaaming.cn/en/post/chapter-5/</link>
      <pubDate>Sat, 31 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-5/</guid>
      <description>随便写写</description>
    </item>
    
    <item>
      <title>[转载]关于时间复杂度与P、NP问题</title>
      <link>https://jiaaming.cn/en/post/chapter-4/</link>
      <pubDate>Sat, 13 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-4/</guid>
      <description>存档</description>
    </item>
    
    <item>
      <title>聊至深夜的一些感想</title>
      <link>https://jiaaming.cn/en/post/chapter-3/</link>
      <pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-3/</guid>
      <description>我在很长一段时间里一直以为大部分人的童年学习都是在恐惧中度过的。直到最近跟好几个哥们儿聊了下发现好像不完全是这样…</description>
    </item>
    
    <item>
      <title>记录一下搭建中用到的有趣开源库&amp;组件</title>
      <link>https://jiaaming.cn/en/post/chapter-2/</link>
      <pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-2/</guid>
      <description>hh</description>
    </item>
    
    <item>
      <title>Hello World Again</title>
      <link>https://jiaaming.cn/en/post/chapter-1/</link>
      <pubDate>Sat, 09 Jul 2022 10:58:08 -0400</pubDate>
      
      <guid>https://jiaaming.cn/en/post/chapter-1/</guid>
      <description>最近看了很多学长和许多同龄人整的博客，然后心血来潮想自己搭一个玩玩。路子大致就是用了Hugo的框架，配置下github pages然后设置下vercel，再阿里云买个域名配置下DNS映射。这样网站既不用备案也能获得比较理想的访问速度。
或许以后会在这里面写写东西捏</description>
    </item>
    
  </channel>
</rss>
